{"version":3,"sources":["Redux/authReducer.js","components/Header.js","components/Main.js","API/api.js","Redux/postsReducers.js","components/Posts.js","components/Profile.js","HOC.js","components/Login.js","App.js","serviceWorker.js","Redux/store.js","index.js","components/Header.module.css"],"names":["initialState","isAuth","localStorage","getItem","authReducer","state","action","type","setItem","removeItem","connect","auth","logout","className","style","header","to","onClick","login","Main","AppAPI","axios","posts","pertOfPosts","counter","postsReducers","slice","length","getPosts","dispatch","a","response","data","getNewPartPosts","useEffect","window","addEventListener","document","documentElement","getBoundingClientRect","bottom","clientHeight","map","p","key","id","title","body","Post","compose","Component","props","sendLogin","dataLogin","username","password","sendLoginSuccess","stopSubmit","_error","ReduxLoginForm","onSubmit","reduxForm","form","handleSubmit","error","Field","validate","name","placeholder","component","App","exact","path","render","Boolean","location","hostname","match","reducers","combineReducers","formReducer","store","createStore","applyMiddleware","ThunkMiddleware","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.6464aab1.chunk.js","sourcesContent":["import {stopSubmit} from \"redux-form\";\r\n\r\nconst SEND_LOGIN = 'SEND_LOGIN'\r\nconst LOGOUT = 'LOGOUT'\r\nlet initialState = {\r\n    isAuth: localStorage.getItem('username')\r\n}\r\nconst authReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SEND_LOGIN :\r\n                localStorage.setItem('username', 'Admin')\r\n                localStorage.setItem('password', '123456')\r\n                return {\r\n                    ...state,\r\n                    isAuth: true\r\n                }\r\n\r\n        case LOGOUT :\r\n            localStorage.removeItem('username')\r\n            return {\r\n                ...state,\r\n                isAuth: false\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\nexport const sendLoginSuccess= (dataLogin) => ({type: SEND_LOGIN, dataLogin})\r\n\r\nexport const sendLogin = (dataLogin) => (dispatch)=> {\r\n    if (dataLogin.username === 'Admin' && dataLogin.password === '123456') {\r\n        dispatch (sendLoginSuccess(dataLogin))\r\n    }\r\n    else dispatch(stopSubmit('login', {_error: 'Имя пользователя или пароль введены не верно '}))\r\n}\r\n\r\n\r\nexport const logout = () => ({type: LOGOUT})\r\nexport default authReducer","import React from 'react'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport style from './Header.module.css'\r\nimport {connect} from \"react-redux\";\r\nimport {logout} from \"../Redux/authReducer\";\r\n\r\nconst Header = ({logout, isAuth}) => {\r\n    return <div className={style.header}>\r\n            <NavLink to='/'>Main</NavLink>\r\n            <NavLink to='/posts'>Posts</NavLink>\r\n            <NavLink to='/profile'>Profile</NavLink>\r\n        {isAuth && <span onClick={logout} className={style.logout}>Logout</span>}\r\n        {!isAuth && <NavLink className={style.login} to={'/login'}>Login</NavLink>}\r\n        </div>\r\n\r\n\r\n}\r\nconst mapStateToProps =(state) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\nexport default connect(mapStateToProps, {logout}) (Header)","import React from 'react'\r\n\r\n\r\nconst Main = () => {\r\n    return <div className={'main'}>\r\n        <h1>Main</h1>\r\n    </div>\r\n}\r\n\r\nexport default Main","import * as axios from 'axios'\r\n\r\nexport const AppAPI = {\r\n    getPosts () {\r\n        return axios.get('https://jsonplaceholder.typicode.com/posts')\r\n    }\r\n}","import {AppAPI} from \"../API/api\";\r\n\r\nconst SET_POSTS = \"SET_POSTS\"\r\nconst SET_NEW_PART_POSTS = \"SET_NEW_PART_POSTS\"\r\n\r\nlet initialState = {\r\n    posts: null,\r\n    pertOfPosts: null,\r\n    counter: null\r\n}\r\n\r\nconst postsReducers = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_POSTS:\r\n            return {\r\n                ...state,\r\n                posts: action.posts,\r\n                pertOfPosts: action.posts.slice(0, 19),\r\n                counter: 9\r\n            }\r\n        case SET_NEW_PART_POSTS:\r\n            if(state.counter === state.posts.length - 1 || state.counter > state.posts.length - 1) return state\r\n            return {\r\n                ...state,\r\n                counter: (state.counter + 10),\r\n                pertOfPosts: state.posts.slice(0, state.counter)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\nconst getPostSuccess = (posts) => ({type: SET_POSTS, posts})\r\nexport const getNewPartPosts = () => ({type: SET_NEW_PART_POSTS})\r\nexport const getPosts = () => async (dispatch) => {\r\n\r\n    let response = await AppAPI.getPosts()\r\n\r\n    dispatch(getPostSuccess(response.data))\r\n\r\n}\r\nexport default postsReducers","import React, {useEffect} from 'react'\r\nimport {getNewPartPosts, getPosts} from \"../Redux/postsReducers\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nconst Posts = ({posts, pertOfPosts, getPosts, getNewPartPosts}) => {\r\n    useEffect(\r\n          () => {\r\n            getPosts()\r\n        }, [getPosts]\r\n    )\r\n\r\n    function populate() {\r\n            let windowRelativeBottom = document.documentElement.getBoundingClientRect().bottom;\r\n            if (windowRelativeBottom < document.documentElement.clientHeight + 100) {getNewPartPosts()};\r\n    }\r\n    window.addEventListener('scroll', populate)\r\n    return <div className={'posts'}>\r\n        {pertOfPosts && pertOfPosts.map(p => <Post key={p.id} title={p.title} body={p.body}/>)}\r\n    </div>\r\n}\r\nconst mapStateToProps = (state) => ({\r\n    posts: state.posts.posts,\r\n    pertOfPosts: state.posts.pertOfPosts\r\n})\r\n\r\nexport default connect(mapStateToProps, {getPosts, getNewPartPosts})(Posts)\r\n\r\nconst Post = ({title, body}) => {\r\n    return <div className={'post'}>\r\n        <div className={'post_title'}>{title}</div>\r\n        <div className={'post_body'}>{body}</div>\r\n    </div>\r\n}","import React from 'react'\r\nimport {compose} from \"redux\";\r\nimport {withAuthRedirect} from \"../HOC\";\r\n\r\n\r\nconst Profile = () => {\r\n    return <div className={'profile'}>\r\n        <h1>Profile</h1>\r\n    </div>\r\n}\r\n\r\nexport default compose(withAuthRedirect)(Profile)","import {connect} from \"react-redux\";\r\nimport React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    const newComponent = (props) => {\r\n        if(!props.isAuth) return <Redirect to={'/login'}/>\r\n        else return <Component {...props}/>\r\n    }\r\n    let mapStateToProps = (state) => ({\r\n        isAuth: state.auth.isAuth\r\n    })\r\n    return connect(mapStateToProps)(newComponent)\r\n}","import React from 'react'\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {connect} from \"react-redux\";\r\nimport {sendLogin} from \"../Redux/authReducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\nconst Login = ({isAuth, sendLogin}) => {\r\n    const submitLogin = (dataLogin) => {\r\n        sendLogin(dataLogin)\r\n    }\r\n    return isAuth? <Redirect to={'/profile'}/> :\r\n    <div className={'main'}>\r\n        <ReduxLoginForm onSubmit={submitLogin}/>\r\n    </div>\r\n}\r\nconst mapStateToProps =(state) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\nexport default connect(mapStateToProps, {sendLogin}) (Login)\r\n\r\nconst LoginForm = ({handleSubmit, error})=>{\r\n    return <form onSubmit = {handleSubmit}>\r\n        <div>Username</div>\r\n        <Field validate={[]} name='username' type=\"text\" placeholder={'username'} component={'input'}/>\r\n        <div>Password</div>\r\n        <Field validate={[]} name='password' type=\"password\" placeholder={'password'} component={'input'}/>\r\n        {error && <div>{error}</div>}\r\n        <div><button>Login</button></div>\r\n    </form>\r\n}\r\n\r\nconst ReduxLoginForm = reduxForm({form: 'login'}) (LoginForm)\r\n","import React from 'react';\nimport './App.css';\nimport {Route, Switch} from \"react-router-dom\";\nimport Header from \"./components/Header\";\nimport Main from \"./components/Main\";\nimport Posts from \"./components/Posts\";\nimport Profile from \"./components/Profile\";\nimport Login from \"./components/Login\";\n\n\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Header/>\n            <div className=\"App-content\">\n                <Switch>\n                    <Route exact path='/' render={() => <Main/>}/>\n                    <Route path='/posts' render={() => <Posts/>}/>\n                    <Route path='/profile' render={() => <Profile/>}/>\n                    <Route path='/login' render={() => <Login/>}/>\n                    <Route path='*' render={() => <div><h1>404 NOT FOUND</h1></div>}/>\n                </Switch>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport authReducer from \"./authReducer\";\r\nimport postsReducers from \"./postsReducers\";\r\nimport ThunkMiddleware from \"redux-thunk\";\r\nimport { reducer as formReducer } from 'redux-form'\r\nconst reducers = combineReducers({\r\n    auth: authReducer,\r\n    posts: postsReducers,\r\n    form: formReducer\r\n})\r\nconst store = createStore(reducers, applyMiddleware(ThunkMiddleware))\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {HashRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport store from \"./Redux/store\";\n\nReactDOM.render(\n    <HashRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </HashRouter>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\nwindow.store = store","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3ZfwD\",\"logout\":\"Header_logout__2GdG5\",\"login\":\"Header_login__2kGxk\"};"],"sourceRoot":""}